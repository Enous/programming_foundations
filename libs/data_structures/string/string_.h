#ifndef LIBS_STRING__H
#define LIBS_STRING__H

#include <stdbool.h>

#define MAX_STRING_SIZE 100

typedef struct Word
{
    char *beginning; // –ø–æ–∑–∏—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–∞
    char *end; // –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å–ª–æ–≤–∞
} Word;

/* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ, –Ω–µ —Å—á–∏—Ç–∞—è –Ω—É–ª—å-—Å–∏–º–≤–æ–ª */
size_t get_strlen(const char*);

/* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–æ–¥–æ–º chr,
   —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –ª–µ–Ω—Ç–µ –ø–∞–º—è—Ç–∏ –º–µ–∂–¥—É –∞–¥—Ä–µ—Å–∞–º–∏ start –∏ end,
   –Ω–µ –≤–∫–ª—é—á–∞—è end */
char* find(char*, char*, int);

/* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç –ø—Ä–æ–±–µ–ª—å–Ω–æ–≥–æ,
   —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –ª–µ–Ω—Ç–µ –ø–∞–º—è—Ç–∏ –º–µ–∂–¥—É –∞–¥—Ä–µ—Å–∞–º–∏ start –∏ end,
   –Ω–µ –≤–∫–ª—é—á–∞—è end */
char* findNonSpaceChr(char*);

/* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–±–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª,
   —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –ª–µ–Ω—Ç–µ –ø–∞–º—è—Ç–∏ –º–µ–∂–¥—É –∞–¥—Ä–µ—Å–∞–º–∏ start –∏ end,
   –Ω–µ –≤–∫–ª—é—á–∞—è end */
char* findSpaceChr(char*);

/* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç –ø—Ä–æ–±–µ–ª—å–Ω–æ–≥–æ,
   —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –ª–µ–Ω—Ç–µ –ø–∞–º—è—Ç–∏ –º–µ–∂–¥—É –∞–¥—Ä–µ—Å–∞–º–∏ start –∏ end,
   –Ω–µ –≤–∫–ª—é—á–∞—è start */
char* findLastNonSpaceChr(char*, const char*);

/* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª,
   —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –ª–µ–Ω—Ç–µ –ø–∞–º—è—Ç–∏ –º–µ–∂–¥—É –∞–¥—Ä–µ—Å–∞–º–∏ start –∏ end,
   –Ω–µ –≤–∫–ª—é—á–∞—è start */
char* findLastSpaceChr(char*, const char*);

int strcmp(const char*, const char*);

int is_lowercase(int);

/* –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ –∞–¥—Ä–µ—Å—É destination —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–∞–º—è—Ç–∏,
   –Ω–∞—á–∏–Ω–∞—è —Å –∞–¥—Ä–µ—Å–∞ source_start –¥–æ source_end;
   –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–∞–º—è—Ç–∏ –≤
   destination */
char* copy(const char*, const char*, char*);

/* –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ –∞–¥—Ä–µ—Å—É destination —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –ø–∞–º—è—Ç–∏,
   –Ω–∞—á–∏–Ω–∞—è —Å source_start –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è source_end,
   —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏-–ø—Ä–µ–¥–∏–∫–∞—Ç—É f;
   –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤ –ø–∞–º—è—Ç–∏ */
char* copyBasedOnCondition(char*, const char*, char*, int (*)(int));

/* –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ –∞–¥—Ä–µ—Å—É destination —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –ø–∞–º—è—Ç–∏,
   –Ω–∞—á–∏–Ω–∞—è —Å source_end –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è source_start,
   —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏-–ø—Ä–µ–¥–∏–∫–∞—Ç—É;
   –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤ –ø–∞–º—è—Ç–∏ */
char* copyReversedBasedOnCondition(char*, const char*,
                                   char*, int (*)(int));

/* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –≤ —Å—Ç—Ä–æ–∫–µ */
char* getEndOfString(char*);

/* —Å–æ–∫—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
   –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ –æ–¥–Ω–æ–≥–æ */
void removeExtraSpaces(char*);

int getWord(char*, Word*);

/* –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ü–∏—Ñ—Ä—ã –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –±—ã–ª–∏ –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞
   –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏—Ö –≤ —Å–ª–æ–≤–µ, –∞ –±—É–∫–≤—ã ‚Äì –≤ –Ω–∞—á–∞–ª–æ */
void moveDigitsToWordEnd(Word);

/* –∑–∞–º–µ–Ω—è–µ—Ç –∫–∞–∂–¥—É—é —Ü–∏—Ñ—Ä—É –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –µ–π —á–∏—Å–ª–æ–º –ø—Ä–æ–±–µ–ª–æ–≤ */
void replaceDigitsWithDigitNumOfSpaces(char*);

/* –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ–≤–∞ ùë§1 –Ω–∞ —Å–ª–æ–≤–æ ùë§2 */
void replace(char*, char*, char*);

/* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0, –µ—Å–ª–∏ w1 –∏ w2 —Ä–∞–≤–Ω—ã,
   –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ w1 —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –¥–æ w2 –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ,
   –∏–Ω–∞—á–µ - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */
int wordsAreEqual(Word, Word);

/* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ,
   –∏ false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ */
bool wordsAreInLexicographicOrder(char*);

/* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ (–Ω–∞—á–∏–Ω–∞—è —Å –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏), –∏ 0 –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ */
int getWordStartingFromEnd(char*, char*, Word*);

/* –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ */
void printWordsInReverseOrder(char*);

#endif //LIBS_STRING__H
